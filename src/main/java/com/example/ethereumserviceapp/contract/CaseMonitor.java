package com.example.ethereumserviceapp.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes16;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.6.1.
 */
@SuppressWarnings("rawtypes")
public class CaseMonitor extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b50612ec0806100206000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063987a7116116100a2578063d4988c1511610071578063d4988c1514610706578063d840e7171461075f578063ea0288201461091d578063f8c6c17214610968578063fb40c22a146109a957610116565b8063987a7116146105475780639ab5724e146105d5578063b47520be14610616578063bc8a4d0b1461066f57610116565b806345b10ce4116100e957806345b10ce41461026c5780637f16a034146102c15780638b6e3374146103025780638e2aa1f3146103575780639719dbc4146104f257610116565b80630a6184c11461011b5780630d8f003b1461015c578063235f4c12146101b557806329a47a36146101f6575b600080fd5b61015a6004803603602081101561013157600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050610a08565b005b61019b6004803603602081101561017257600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050610cd4565b604051808215151515815260200191505060405180910390f35b6101f4600480360360208110156101cb57600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050610d60565b005b61026a600480360360c081101561020c57600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190803560ff1690602001909291908035906020019092919080359060200190929190803590602001909291908035906020019092919050505061136d565b005b6102ab6004803603602081101561028257600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050611590565b6040518082815260200191505060405180910390f35b610300600480360360208110156102d757600080fd5b8101908080356fffffffffffffffffffffffffffffffff191690602001909291905050506115d3565b005b6103416004803603602081101561031857600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050611ae2565b6040518082815260200191505060405180910390f35b6103966004803603602081101561036d57600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050611b25565b60405180866fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200180602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b838110156104115780820151818401526020810190506103f6565b50505050905001858103845288818151815260200191508051906020019060200280838360005b83811015610453578082015181840152602081019050610438565b50505050905001858103835287818151815260200191508051906020019060200280838360005b8381101561049557808201518184015260208101905061047a565b50505050905001858103825286818151815260200191508051906020019060200280838360005b838110156104d75780820151818401526020810190506104bc565b50505050905001995050505050505050505060405180910390f35b6105316004803603602081101561050857600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050611d12565b6040518082815260200191505060405180910390f35b6105d3600480360361010081101561055e57600080fd5b8101908080356fffffffffffffffffffffffffffffffff1916906020019092919080359060200190929190803560ff169060200190929190803590602001909291908035906020019092919080359060200190929190803560ff16906020019092919080359060200190929190505050611d55565b005b610614600480360360208110156105eb57600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050611f2c565b005b6106556004803603602081101561062c57600080fd5b8101908080356fffffffffffffffffffffffffffffffff1916906020019092919050505061205c565b604051808215151515815260200191505060405180910390f35b6106ae6004803603602081101561068557600080fd5b8101908080356fffffffffffffffffffffffffffffffff191690602001909291905050506120e8565b60405180846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020018360098111156106ea57fe5b60ff168152602001828152602001935050505060405180910390f35b6107456004803603602081101561071c57600080fd5b8101908080356fffffffffffffffffffffffffffffffff1916906020019092919050505061215d565b604051808215151515815260200191505060405180910390f35b61079e6004803603602081101561077557600080fd5b8101908080356fffffffffffffffffffffffffffffffff191690602001909291905050506121e9565b60405180896fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001888152602001806020018060200180602001806020018760068111156107f057fe5b60ff16815260200186815260200185810385528b818151815260200191508051906020019060200280838360005b8381101561083957808201518184015260208101905061081e565b5050505090500185810384528a818151815260200191508051906020019060200280838360005b8381101561087b578082015181840152602081019050610860565b50505050905001858103835289818151815260200191508051906020019060200280838360005b838110156108bd5780820151818401526020810190506108a2565b50505050905001858103825288818151815260200191508051906020019060200280838360005b838110156108ff5780820151818401526020810190506108e4565b505050509050019c5050505050505050505050505060405180910390f35b6109666004803603604081101561093357600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190803590602001909291905050506123fd565b005b6109a76004803603602081101561097e57600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050612738565b005b6109b1612a6f565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156109f45780820151818401526020810190506109d9565b505050509050019250505060405180910390f35b610a1181610cd4565b15610a1b57600080fd5b60606001604051908082528060200260200182016040528015610a4d5781602001602082028038833980820191505090505b509050600081600081518110610a5f57fe5b60200260200101818152505060606001604051908082528060200260200182016040528015610a9d5781602001602082028038833980820191505090505b509050600081600081518110610aaf57fe5b60200260200101818152505060606001604051908082528060200260200182016040528015610aed5781602001602082028038833980820191505090505b509050600081600081518110610aff57fe5b60200260200101818152505060606001604051908082528060200260200182016040528015610b3d5781602001602082028038833980820191505090505b509050600081600081518110610b4f57fe5b60200260200101906006811115610b6257fe5b90816006811115610b6f57fe5b8152505060026040518060a00160405280876fffffffffffffffffffffffffffffffff19168152602001868152602001858152602001848152602001838152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c02179055506020820151816001019080519060200190610c26929190612b5b565b506040820151816002019080519060200190610c43929190612b5b565b506060820151816003019080519060200190610c60929190612b5b565b506080820151816004019080519060200190610c7d929190612ba8565b50505050600060016002805490500390508060036000886fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002081905550505050505050565b6000806002805490501415610cec5760009050610d5b565b816fffffffffffffffffffffffffffffffff19166002610d0b84611ae2565b81548110610d1557fe5b906000526020600020906005020160000160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19161415610d565760019050610d5b565b600090505b919050565b610d698161215d565b610d7257600080fd5b6000610d7d82611590565b905060016000805490500381146112ac57610d96612c57565b60008281548110610da357fe5b9060005260206000209060080201604051806101000160405290816000820160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020018280548015610e5357602002820191906000526020600020905b815481526020019060010190808311610e3f575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610ed957602002820191906000526020600020906000905b82829054906101000a900460ff166006811115610eb357fe5b81526020019060010190602082600001049283019260010382029150808411610e9a5790505b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015610f3157602002820191906000526020600020905b815481526020019060010190808311610f1d575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015610f8957602002820191906000526020600020905b815481526020019060010190808311610f75575b505050505081526020016006820160009054906101000a900460ff166006811115610fb057fe5b6006811115610fbb57fe5b8152602001600782015481525050905060008060016000805490500381548110610fe157fe5b906000526020600020906008020160000160009054906101000a900460801b905060016000826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000206000905560006001600080549050038154811061105457fe5b90600052602060002090600802016000848154811061106f57fe5b90600052602060002090600802016000820160009054906101000a900460801b8160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c02179055506001820154816001015560028201816002019080546110da929190612cba565b5060038201816003019080546110f1929190612d0c565b506004820181600401908054611108929190612cba565b50600582018160050190805461111f929190612cba565b506006820160009054906101000a900460ff168160060160006101000a81548160ff0219169083600681111561115157fe5b0217905550600782015481600701559050508160006001600080549050038154811061117957fe5b906000526020600020906008020160008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c02179055506020820151816001015560408201518160020190805190602001906111dd929190612b5b565b5060608201518160030190805190602001906111fa929190612ba8565b506080820151816004019080519060200190611217929190612b5b565b5060a0820151816005019080519060200190611234929190612b5b565b5060c08201518160060160006101000a81548160ff0219169083600681111561125957fe5b021790555060e082015181600701559050508260016000836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000208190555050505b60008054806112b757fe5b6001900381819060005260206000209060080201600080820160006101000a8154906fffffffffffffffffffffffffffffffff021916905560018201600090556002820160006113079190612d6c565b6003820160006113179190612d8d565b6004820160006113279190612d6c565b6005820160006113379190612d6c565b6006820160006101000a81549060ff0219169055600782016000905550509055611360826115d3565b61136982612738565b5050565b6113768661215d565b61137f57600080fd5b600061138a87611590565b9050600080828154811061139a57fe5b9060005260206000209060080201905060006113b589611ae2565b90506000600282815481106113c657fe5b906000526020600020906005020190506000816001016000815481106113e857fe5b9060005260206000200154141561149e57878160010160008154811061140a57fe5b9060005260206000200181905550868160020160008154811061142957fe5b9060005260206000200181905550858160030160008154811061144857fe5b9060005260206000200181905550888160040160008154811061146757fe5b90600052602060002090602091828204019190066101000a81548160ff0219169083600681111561149457fe5b021790555061157b565b8060010188908060018154018082558091505090600182039060005260206000200160009091929091909150555080600201879080600181540180825580915050906001820390600052602060002001600090919290919091505550806003018690806001815401808255809150509060018203906000526020600020016000909192909190915055508060040189908060018154018082558091505090600182039060005260206000209060209182820401919006909192909190916101000a81548160ff0219169083600681111561157457fe5b0217905550505b84836007018190555050505050505050505050565b600060016000836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020549050919050565b6115dc81610cd4565b6115e557600080fd5b60006115f082611ae2565b90506001600280549050038114611a5757611609612db5565b6002828154811061161657fe5b90600052602060002090600502016040518060a00160405290816000820160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001600182018054806020026020016040519081016040528092919081815260200182805480156116bb57602002820191906000526020600020905b8154815260200190600101908083116116a7575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561171357602002820191906000526020600020905b8154815260200190600101908083116116ff575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561176b57602002820191906000526020600020905b815481526020019060010190808311611757575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156117f157602002820191906000526020600020906000905b82829054906101000a900460ff1660068111156117cb57fe5b815260200190600101906020826000010492830192600103820291508084116117b25790505b5050505050815250509050600060026001600280549050038154811061181357fe5b906000526020600020906005020160000160009054906101000a900460801b905060036000826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000206000905560026001600280549050038154811061188657fe5b9060005260206000209060050201600284815481106118a157fe5b90600052602060002090600502016000820160009054906101000a900460801b8160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c02179055506001820181600101908054611902929190612cba565b506002820181600201908054611919929190612cba565b506003820181600301908054611930929190612cba565b506004820181600401908054611947929190612d0c565b509050508160026001600280549050038154811061196157fe5b906000526020600020906005020160008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c021790555060208201518160010190805190602001906119bb929190612b5b565b5060408201518160020190805190602001906119d8929190612b5b565b5060608201518160030190805190602001906119f5929190612b5b565b506080820151816004019080519060200190611a12929190612ba8565b509050508260036000836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000208190555050505b6002805480611a6257fe5b6001900381819060005260206000209060050201600080820160006101000a8154906fffffffffffffffffffffffffffffffff0219169055600182016000611aaa9190612d6c565b600282016000611aba9190612d6c565b600382016000611aca9190612d6c565b600482016000611ada9190612d8d565b505090555050565b600060036000836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020549050919050565b6000606080606080611b3686610cd4565b611b3f57600080fd5b60006002611b4c88611ae2565b81548110611b5657fe5b906000526020600020906005020190508060000160009054906101000a900460801b8160010182600201836003018460040183805480602002602001604051908101604052809291908181526020018280548015611bd357602002820191906000526020600020905b815481526020019060010190808311611bbf575b5050505050935082805480602002602001604051908101604052809291908181526020018280548015611c2557602002820191906000526020600020905b815481526020019060010190808311611c11575b5050505050925081805480602002602001604051908101604052809291908181526020018280548015611c7757602002820191906000526020600020905b815481526020019060010190808311611c63575b5050505050915080805480602002602001604051908101604052809291908181526020018280548015611cf757602002820191906000526020600020906000905b82829054906101000a900460ff166006811115611cd157fe5b81526020019060010190602082600001049283019260010382029150808411611cb85790505b50505050509050955095509550955095505091939590929450565b600060056000836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020549050919050565b611d5e8861215d565b611d6757600080fd5b6000611d7289611590565b90506000808281548110611d8257fe5b9060005260206000209060080201905060006009811115611d9f57fe5b846009811115611dab57fe5b14611e0d576000611dbb8b611d12565b9050600060048281548110611dcc57fe5b90600052602060002090600202019050858160000160106101000a81548160ff02191690836009811115611dfc57fe5b021790555084816001018190555050505b888160010181905550806002018990806001815401808255809150509060018203906000526020600020016000909192909190915055508060030188908060018154018082558091505090600182039060005260206000209060209182820401919006909192909190916101000a81548160ff02191690836006811115611e9057fe5b0217905550508060040187908060018154018082558091505090600182039060005260206000200160009091929091909150555080600501869080600181540180825580915050906001820390600052602060002001600090919290919091505550878160060160006101000a81548160ff02191690836006811115611f1257fe5b021790555084816007018190555050505050505050505050565b611f358161205c565b15611f3f57600080fd5b60046040518060600160405280836fffffffffffffffffffffffffffffffff1916815260200160006009811115611f7257fe5b815260200160008152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c021790555060208201518160000160106101000a81548160ff02191690836009811115611ffb57fe5b021790555060408201518160010155505050600060016004805490500390508060056000846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020819055505050565b600080600480549050141561207457600090506120e3565b816fffffffffffffffffffffffffffffffff1916600461209384611d12565b8154811061209d57fe5b906000526020600020906002020160000160009054906101000a900460801b6fffffffffffffffffffffffffffffffff191614156120de57600190506120e3565b600090505b919050565b60008060006120f68461205c565b6120ff57600080fd5b6000600461210c86611d12565b8154811061211657fe5b906000526020600020906002020190508060000160009054906101000a900460801b8160000160109054906101000a900460ff168260010154935093509350509193909250565b600080600080549050141561217557600090506121e4565b816fffffffffffffffffffffffffffffffff1916600061219484611590565b8154811061219e57fe5b906000526020600020906008020160000160009054906101000a900460801b6fffffffffffffffffffffffffffffffff191614156121df57600190506121e4565b600090505b919050565b6000806060806060806000806121fe8961215d565b61220757600080fd5b6000806122138b611590565b8154811061221d57fe5b906000526020600020906008020190508060000160009054906101000a900460801b8160010154826002018360030184600401856005018660060160009054906101000a900460ff168760070154858054806020026020016040519081016040528092919081815260200182805480156122b657602002820191906000526020600020905b8154815260200190600101908083116122a2575b505050505095508480548060200260200160405190810160405280929190818152602001828054801561233657602002820191906000526020600020906000905b82829054906101000a900460ff16600681111561231057fe5b815260200190600101906020826000010492830192600103820291508084116122f75790505b505050505094508380548060200260200160405190810160405280929190818152602001828054801561238857602002820191906000526020600020905b815481526020019060010190808311612374575b50505050509350828054806020026020016040519081016040528092919081815260200182805480156123da57602002820191906000526020600020905b8154815260200190600101908083116123c6575b505050505092509850985098509850985098509850985050919395975091939597565b6124068261215d565b1561241057600080fd5b606060016040519080825280602002602001820160405280156124425781602001602082028038833980820191505090505b509050818160008151811061245357fe5b602002602001018181525050606060016040519080825280602002602001820160405280156124915781602001602082028038833980820191505090505b5090506000816000815181106124a357fe5b602002602001019060068111156124b657fe5b908160068111156124c357fe5b81525050606060016040519080825280602002602001820160405280156124f95781602001602082028038833980820191505090505b5090506060600160405190808252806020026020018201604052801561252e5781602001602082028038833980820191505090505b50905060008260008151811061254057fe5b60200260200101818152505060008160008151811061255b57fe5b6020026020010181815250506000604051806101000160405280886fffffffffffffffffffffffffffffffff19168152602001878152602001868152602001858152602001848152602001838152602001600060068111156125b957fe5b815260200160008152509080600181540180825580915050906001820390600052602060002090600802016000909192909190915060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c0217905550602082015181600101556040820151816002019080519060200190612644929190612b5b565b506060820151816003019080519060200190612661929190612ba8565b50608082015181600401908051906020019061267e929190612b5b565b5060a082015181600501908051906020019061269b929190612b5b565b5060c08201518160060160006101000a81548160ff021916908360068111156126c057fe5b021790555060e08201518160070155505050600060016000805490500390508060016000896fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000208190555061272687610a08565b61272f87611f2c565b50505050505050565b6127418161205c565b61274a57600080fd5b600061275582611d12565b90506001600480549050038114612a085761276e612df7565b6004828154811061277b57fe5b90600052602060002090600202016040518060600160405290816000820160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016000820160109054906101000a900460ff1660098111156127ef57fe5b60098111156127fa57fe5b81526020016001820154815250509050600060046001600480549050038154811061282157fe5b906000526020600020906002020160000160009054906101000a900460801b905060056000826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000206000905560046001600480549050038154811061289457fe5b9060005260206000209060020201600484815481106128af57fe5b90600052602060002090600202016000820160009054906101000a900460801b8160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c02179055506000820160109054906101000a900460ff168160000160106101000a81548160ff0219169083600981111561292b57fe5b0217905550600182015481600101559050508160046001600480549050038154811061295357fe5b906000526020600020906002020160008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c021790555060208201518160000160106101000a81548160ff021916908360098111156129b557fe5b0217905550604082015181600101559050508260056000836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000208190555050505b6004805480612a1357fe5b6001900381819060005260206000209060020201600080820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556000820160106101000a81549060ff02191690556001820160009055505090555050565b606080600080549050604051908082528060200260200182016040528015612aa65781602001602082028038833980820191505090505b509050600080805490501115612b545760008090506000808054905090505b6000811115612b515760006001820381548110612ade57fe5b906000526020600020906008020160000160009054906101000a900460801b838380600101945081518110612b0f57fe5b60200260200101906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff191681525050808060019003915050612ac5565b50505b8091505090565b828054828255906000526020600020908101928215612b97579160200282015b82811115612b96578251825591602001919060010190612b7b565b5b509050612ba49190612e36565b5090565b82805482825590600052602060002090601f01602090048101928215612c465791602002820160005b83821115612c1757835183826101000a81548160ff02191690836006811115612bf657fe5b02179055509260200192600101602081600001049283019260010302612bd1565b8015612c445782816101000a81549060ff0219169055600101602081600001049283019260010302612c17565b505b509050612c539190612e5b565b5090565b60405180610100016040528060006fffffffffffffffffffffffffffffffff19168152602001600081526020016060815260200160608152602001606081526020016060815260200160006006811115612cad57fe5b8152602001600081525090565b828054828255906000526020600020908101928215612cfb5760005260206000209182015b82811115612cfa578254825591600101919060010190612cdf565b5b509050612d089190612e36565b5090565b82805482825590600052602060002090601f01602090048101928215612d5b57600052602060002091601f016020900482015b82811115612d5a578254825591600101919060010190612d3f565b5b509050612d689190612e5b565b5090565b5080546000825590600052602060002090810190612d8a9190612e36565b50565b50805460008255601f016020900490600052602060002090810190612db29190612e36565b50565b6040518060a0016040528060006fffffffffffffffffffffffffffffffff19168152602001606081526020016060815260200160608152602001606081525090565b604051806060016040528060006fffffffffffffffffffffffffffffffff1916815260200160006009811115612e2957fe5b8152602001600081525090565b612e5891905b80821115612e54576000816000905550600101612e3c565b5090565b90565b612e8891905b80821115612e8457600081816101000a81549060ff021916905550600101612e61565b5090565b9056fea265627a7a72315820af16efe15db32a3e866ad51a261ded72dafb787c4505cff5ada0df6f68de9e5a64736f6c63430005100032";

    public static final String FUNC__GETCASEINDEX = "_getCaseIndex";

    public static final String FUNC__GETPAYMENTINDEX = "_getPaymentIndex";

    public static final String FUNC__GETREJECTIONINDEX = "_getRejectionIndex";

    public static final String FUNC_ADDCASE = "addCase";

    public static final String FUNC_ADDCASEPAYMENT = "addCasePayment";

    public static final String FUNC_ADDCASEREJECTION = "addCaseRejection";

    public static final String FUNC_UPDATECASE = "updateCase";

    public static final String FUNC_ADDPAYMENT = "addPayment";

    public static final String FUNC_CASEEXISTS = "caseExists";

    public static final String FUNC_PAYMENTEXISTS = "paymentExists";

    public static final String FUNC_REJECTIONEXISTS = "rejectionExists";

    public static final String FUNC_GETALLCASES = "getAllCases";

    public static final String FUNC_GETCASE = "getCase";

    public static final String FUNC_GETPAYMENT = "getPayment";

    public static final String FUNC_GETREJECTION = "getRejection";

    public static final String FUNC_DELETECASE = "deleteCase";

    public static final String FUNC_DELETEPAYMENT = "deletePayment";

    public static final String FUNC_DELETEREJECTION = "deleteRejection";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("2018", "0xDa04fa66Bd544fAc14214Da9862F41447Ee55c71");
    }

    @Deprecated
    protected CaseMonitor(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CaseMonitor(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CaseMonitor(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CaseMonitor(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<BigInteger> _getCaseIndex(byte[] _uuid) {
        final Function function = new Function(FUNC__GETCASEINDEX, 
                Arrays.asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)),
                Arrays.asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _getPaymentIndex(byte[] _uuid) {
        final Function function = new Function(FUNC__GETPAYMENTINDEX, 
                Arrays.asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)),
                Arrays.asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _getRejectionIndex(byte[] _uuid) {
        final Function function = new Function(FUNC__GETREJECTIONINDEX, 
                Arrays.asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)),
                Arrays.asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> addCase(byte[] _uuid, BigInteger _date) {
        final Function function = new Function(
                FUNC_ADDCASE, 
                Arrays.asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid),
                new org.web3j.abi.datatypes.generated.Uint256(_date)), 
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addCasePayment(byte[] _uuid) {
        final Function function = new Function(
                FUNC_ADDCASEPAYMENT, 
                Arrays.asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addCaseRejection(byte[] _uuid) {
        final Function function = new Function(
                FUNC_ADDCASEREJECTION, 
                Arrays.asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateCase(byte[] _uuid, BigInteger _date, BigInteger _state, BigInteger _payPerDay, BigInteger _sumDaily, BigInteger _offset, BigInteger _rejectionCode, BigInteger _rejectionDate) {
        final Function function = new Function(
                FUNC_UPDATECASE, 
                Arrays.asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid),
                new org.web3j.abi.datatypes.generated.Uint256(_date), 
                new org.web3j.abi.datatypes.generated.Uint8(_state), 
                new org.web3j.abi.datatypes.generated.Uint256(_payPerDay), 
                new org.web3j.abi.datatypes.generated.Uint256(_sumDaily), 
                new org.web3j.abi.datatypes.generated.Int256(_offset), 
                new org.web3j.abi.datatypes.generated.Uint8(_rejectionCode), 
                new org.web3j.abi.datatypes.generated.Uint256(_rejectionDate)), 
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addPayment(byte[] _uuid, BigInteger _state, BigInteger _pDate, BigInteger _payHistory, BigInteger _payCalculation, BigInteger _offset) {
        final Function function = new Function(
                FUNC_ADDPAYMENT, 
                Arrays.asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid),
                new org.web3j.abi.datatypes.generated.Uint8(_state), 
                new org.web3j.abi.datatypes.generated.Uint256(_pDate), 
                new org.web3j.abi.datatypes.generated.Uint256(_payHistory), 
                new org.web3j.abi.datatypes.generated.Uint256(_payCalculation), 
                new org.web3j.abi.datatypes.generated.Int256(_offset)), 
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> caseExists(byte[] _uuid) {
        final Function function = new Function(FUNC_CASEEXISTS, 
                Arrays.asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)),
                Arrays.asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> paymentExists(byte[] _uuid) {
        final Function function = new Function(FUNC_PAYMENTEXISTS, 
                Arrays.asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)),
                Arrays.asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> rejectionExists(byte[] _uuid) {
        final Function function = new Function(FUNC_REJECTIONEXISTS, 
                Arrays.asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)),
                Arrays.asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<List> getAllCases() {
        final Function function = new Function(FUNC_GETALLCASES, 
                Arrays.asList(),
                Arrays.asList(new TypeReference<DynamicArray<Bytes16>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple8<byte[], BigInteger, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, BigInteger, BigInteger>> getCase(byte[] _uuid) {
        final Function function = new Function(FUNC_GETCASE, 
                Arrays.asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)),
                Arrays.asList(new TypeReference<Bytes16>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint8>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Uint8>() {}, new TypeReference<Int256>() {}));
        return new RemoteFunctionCall<Tuple8<byte[], BigInteger, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, BigInteger, BigInteger>>(function,
                new Callable<Tuple8<byte[], BigInteger, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple8<byte[], BigInteger, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<byte[], BigInteger, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, BigInteger, BigInteger>(
                                (byte[]) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                convertToNative((List<Uint256>) results.get(2).getValue()), 
                                convertToNative((List<Uint8>) results.get(3).getValue()), 
                                convertToNative((List<Uint256>) results.get(4).getValue()), 
                                convertToNative((List<Uint256>) results.get(5).getValue()), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple5<byte[], List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>> getPayment(byte[] _uuid) {
        final Function function = new Function(FUNC_GETPAYMENT, 
                Arrays.asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)),
                Arrays.asList(new TypeReference<Bytes16>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint8>>() {}));
        return new RemoteFunctionCall<Tuple5<byte[], List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>>(function,
                new Callable<Tuple5<byte[], List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple5<byte[], List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<byte[], List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>(
                                (byte[]) results.get(0).getValue(), 
                                convertToNative((List<Uint256>) results.get(1).getValue()), 
                                convertToNative((List<Uint256>) results.get(2).getValue()), 
                                convertToNative((List<Uint256>) results.get(3).getValue()), 
                                convertToNative((List<Uint8>) results.get(4).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Tuple3<byte[], BigInteger, BigInteger>> getRejection(byte[] _uuid) {
        final Function function = new Function(FUNC_GETREJECTION, 
                Arrays.asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)),
                Arrays.asList(new TypeReference<Bytes16>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<byte[], BigInteger, BigInteger>>(function,
                new Callable<Tuple3<byte[], BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<byte[], BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<byte[], BigInteger, BigInteger>(
                                (byte[]) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> deleteCase(byte[] _uuid) {
        final Function function = new Function(
                FUNC_DELETECASE, 
                Arrays.asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deletePayment(byte[] _uuid) {
        final Function function = new Function(
                FUNC_DELETEPAYMENT, 
                Arrays.asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteRejection(byte[] _uuid) {
        final Function function = new Function(
                FUNC_DELETEREJECTION, 
                Arrays.asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static CaseMonitor load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CaseMonitor(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CaseMonitor load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CaseMonitor(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CaseMonitor load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CaseMonitor(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CaseMonitor load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CaseMonitor(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CaseMonitor> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CaseMonitor.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CaseMonitor> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CaseMonitor.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<CaseMonitor> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CaseMonitor.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CaseMonitor> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CaseMonitor.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }
}
